input {
  udp {
    port => 1514
    type => "syslog"
  }
  tcp {
    port => 1514
    type => "syslog"
  }
  udp {
    port => 2055
    codec => netflow {
    }
    type => "netflow"
  }
}

filter {
  if [host] =~ /^192\.168\.20\.11$/ {
    if [type] =~ /^netflow$/ {
      geoip {
        source => "[netflow][ipv4_src_addr]"
        target => "geoip_src"
      }
      geoip {
        source => "[netflow][ipv4_dst_addr]"
        target => "geoip_dst"
      }
    } else {
      grok {
        add_tag => [ "firewall" ]
        match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
      }
      mutate {
        gsub => ["datetime","  "," "]
      }
      date {
        match => [ "datetime", "MMM dd HH:mm:ss" ]
        timezone => "US/Pacific"
      }
      mutate {
        replace => [ "message", "%{msg}" ]
      }
      mutate {
        remove_field => [ "msg", "datetime" ]
      }
      if [prog] =~ /^filterlog$/ {
        mutate {
          add_tag => [ "packetfilter" ]
        }
        grok {
          match => [ 'message', '%{INT:rule_number},%{INT:sub_rule_number},,%{INT:tracker_id},%{WORD:interface},%{WORD:reason},%{WORD:action},%{WORD:direction},%{WORD:ip_version},%{GREEDYDATA:msg}' ] 
        }
        mutate {
          replace => [ "message", "%{msg}" ]
        }
        if [ip_version] == "4" {
          # IPv4. Grab field up to dest_ip. Rest can vary.
          grok {
            match => [ 'message', '%{WORD:tos},(\d+)?,%{INT:ttl},%{INT:id},%{INT:offset},%{WORD:flags},%{INT:protocol_id},%{WORD:protocol},%{INT:length},%{IP:src_ip},%{IP:dest_ip},%{GREEDYDATA:msg}' ]
          }

          if [protocol_id] != 2 {
            # Non-IGMP has more fields.
            grok {
              match => [ 'msg', '%{WORD:src_port},%{WORD:dest_port}' ]
            }

          }
        } else {
          # IPv6. Grab field up to dest_ip. Rest can vary.
          grok {
            match => [ 'message', '%{WORD:class},%{WORD:flow_label},%{INT:hop_limit},%{WORD:protocol},%{INT:protocol_id},%{INT:length},%{IPV6:src_ip},%{IPV6:dest_ip},%{GREEDYDATA:msg}' ]		
          }

          mutate {
            replace => [ 'message', '%{msg}' ]
            lowercase => [ 'protocol' ]
          }

          if [message] {
            # Non-ICMP has more fields
            grok {
              match => [ 'message', '%{INT:src_port},%{INT:dest_port},%{INT:data_length}' ]
            }
          }
        }
        mutate {
          remove_field => [ "message", "msg" ]
        }
      }
      if [prog] =~ /^dhcpd$/ {
        if [message] =~ /^DHCPACK|^DHCPREQUEST|^DHCPOFFER/ {
          grok {
            match => [ "message", "(?<action>.*) (on|for|to) (?<src_ip>[0-2]?[0-9]?[0-9]\.[0-2]?[0-9]?[0-9]\.[0-2]?[0-9]?[0-9]\.[0-2]?[0-9]?[0-9]) .*(?<mac_address>[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]).* via (?<iface>.*)" ]
          }
        }
        if [message] =~ /^DHCPDISCOVER/ {
          grok {
            match => [ "message", "(?<action>.*) from (?<mac_address>[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]).* via (?<iface>.*)" ]
          }
        }
        if [message] =~ /^DHCPINFORM/ {
          grok {
            match => [ "message", "(?<action>.*) from (?<src_ip>.*).* via (?<iface>.*)" ]
          }
        }
      } 
      geoip {
        source => "[src_ip]"
        target => "geoip_src"
      }
      geoip {
        source => "[dest_ip]"
        target => "geoip_dst"
      }
    }
    geoip {
      database => "/config/GeoIPASNum.dat"
      source => "[geoip_src][ip]"
      target => "asn_src"
    }
    geoip {
      database => "/config/GeoIPASNum.dat"
      source => "[geoip_dst][ip]"
      target => "asn_dst"
    }
  }
}

output {
  stdout { codec => rubydebug }
  if([type] == "netflow") {
    elasticsearch {
      template_name => "netflow"
      template => "/config/netflow.json"
      template_overwrite => true
      index => "netflow-%{+YYYY.MM.dd}"
      hosts => ["elasticsearch:9200"]
    }
  } else {
    elasticsearch {
      template_name => "logstash"
      template => "/config/logstash.json"
      template_overwrite => true
      index => "logstash-%{+YYYY.MM.dd}"
      hosts => ["elasticsearch:9200"]
    }
  }
}
